// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum InvoiceStatus {
  PAID
  UNPAID
  OVERDUE
}

enum ProductType {
  PHYSICAL
  SERVICE
  DIGITAL
  OTHER
}

enum WithdrawalStatus {
  PENDING
  COMPLETED
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?       @map("email_verified")
  image          String?
  password       String?
  phone          String?
  address        String?
  role           UserRole        @default(USER)
  accounts       Account[]
  businesses     Business[]
  clients        Client[]
  invoices       Invoice[]
  products       Product[]
  payments       Payment[]
  withdrawals    Withdrawal[]
  wallets        Wallet[]
  paymentDetails PaymentDetail[]
  reminders      Reminder[]

  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  @@map("users")
}

model Business {
  id                 String  @id @default(cuid())
  name               String
  address            String
  registrationNumber String  @map("registration_number")
  description        String?
  industry           String

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("businesses")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Client {
  id             String  @id @default(cuid())
  name           String
  email          String
  billingAddress String  @map("billing_address")
  phone          String
  businessName   String? @map("business_name")
  image          String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  invoices Invoice[]

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("clients")
}

model Invoice {
  id         String           @id @default(cuid())
  issueDate  DateTime         @map("issue_date")
  dueDate    DateTime         @map("due_date")
  issuedTo   String           @map("issued_to")
  amount     Float
  profit     Float            @default(0)
  invoiceNo  Int              @default(autoincrement()) @map("invoice_no")
  status     InvoiceStatus    @default(UNPAID)
  invoiceRef String           @unique
  products   InvoiceProduct[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  clientId String @map("client_id")
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model Product {
  id            String           @id @default(cuid())
  name          String
  description   String           @db.Text
  price         Float
  purchasePrice Float?           @map("purchase_price")
  type          ProductType
  available     Boolean          @default(true)
  imageURL      String           @map("image_url")
  quantity      Int
  invoices      InvoiceProduct[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("products")
}

model InvoiceProduct {
  invoiceId String  @map("invoice_id")
  invoice   Invoice @relation(fields: [invoiceId], references: [id])

  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id])

  amount   Float @default(0)
  quantity Int

  @@id([invoiceId, productId])
  @@map("invoice_products")
}

model PaymentToken {
  id      String   @id @default(cuid())
  ref     String
  token   String   @unique
  expires DateTime

  @@unique([ref, token])
}

model Payment {
  id            String   @id @default(cuid())
  amount        Float
  transactionNo Int      @default(autoincrement()) @map("transaction_no")
  paymentDate   DateTime @default(now()) @map("payment_date")
  invoiceRef    String   @map("invoice_ref")
  clientName    String   @map("client_name")
  clientId      String   @map("client_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Withdrawal {
  id            String           @id @default(cuid())
  amount        Float
  withdrawalNo  Int              @default(autoincrement()) @map("withdrawal_no")
  withdrawalRef String           @map("withdrawal_ref")
  status        WithdrawalStatus @default(PENDING)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId          String        @map("user_id")
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentDetailId String        @map("paymentDetail_id")
  paymentDetail   PaymentDetail @relation(fields: [paymentDetailId], references: [id], onDelete: Cascade)

  @@map("withdrawals")
}

model Wallet {
  id             String          @id @default(cuid())
  balance        Float           @default(0)
  paymentDetails PaymentDetail[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("wallets")
}

model PaymentDetail {
  id            String       @id @default(cuid())
  accountName   String       @map("account_name")
  accountNumber String       @map("account_number")
  bankName      String       @map("bank_name")
  withdrawals   Withdrawal[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId   String @map("user_id")
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  walletId String @map("wallet_id")
  wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("paymentDetails")
}

model Reminder {
  id              String  @id @default(cuid())
  enableReminders Boolean @default(false) @map("enable_reminders")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("reminders")
}
